var {EventEmitter} = require('events');
var assign = require('lodash/object/assign');
var clone = require('lodash/lang/cloneDeep');
var remove = require('lodash/array/remove');
var find = require('lodash/collection/find');
var findWhere = require('lodash/collection/findWhere');
var filter = require('lodash/collection/filter');

var nulls = {
  todo: {
    id: null,
    text: null,
    parent: null,
    children: []
  },
  children: []
}

let _data = [{
  id: 0,
  text: "Make bread",
  done: false,
  parent: null,
  children: [1,2,3]
}, {
  id: 1,
  text: "Flour",
  done: false,
  parent: 0,
  children: [4, 5]
}, {
  id: 2,
  text: "Egg",
  done: true,
  parent: 0,
  children: []
}, {
  id: 3,
  text: "Yeast",
  done: false,
  parent: 0,
  children: []
}, {
  id: 4,
  text: "Walk to shop",
  done: false,
  parent: 1,
  children: []
}, {
  id: 5,
  text: "Buy flour",
  done: false,
  parent: 1,
  children: []
}, {
  id: 6,
  text: "A really long title to test out things",
  done: false,
  parent: null,
  children: [7]
}, {
  id: 7,
  text: "Another really long title to test out things",
  done: true,
  parent: 6,
  children: [8]
}, {
  id: 8,
  text: "Blah",
  done: false,
  parent: 7,
  children: []
}];

const _state = {
  data: _data,
  todo: nulls.todo,
  children: nulls.children
};

const Store = assign({}, EventEmitter.prototype, {

  init() {

  },

  getData() {
    return _state;
  },

  emitChange() {
    Store.emit('change');
  },

  addChangeListener(callback) {
    Store.on('change', callback);
  },

  removeChangeListener(callback) {
    Store.removeListener('change', callback);
  }

});

module.exports = {
  init: Store.init,
  getData: Store.getData,
  addChangeListener: Store.addChangeListener,
  removeChangeListener: Store.removeChangeListener,

  // add Store methods here
  setTodo(tid) {
    if(tid !== null) {
      _state.todo = find(_data, 'id', tid);
    } else {
      _state.todo = nulls.todo;
    }
    _state.children = filter(_data, 'parent', tid);
    Store.emitChange();
  }
};
