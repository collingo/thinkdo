var React = require('react-native');
var {
  Text,
  View,
  TouchableHighlight,
  StyleSheet,
} = React;
var find = require('lodash/collection/find');
var filter = require('lodash/collection/filter');

var styles = StyleSheet.create({
  row: {
    height: 60,
    justifyContent: 'space-between',
    flexDirection: 'row',
  },
  rowContent: {
    justifyContent: 'center',
    flexDirection: 'column',
    flex: 1,
  },
  separator: {
    height: 1,
    backgroundColor: '#ccc',
  },
  text: {
    fontSize: 20,
    paddingLeft: 20
  },
  status: {
    backgroundColor: 'red',
    height: 60,
    width: 60,
    justifyContent: 'center',
  },
  statusContent: {
    fontSize: 20,
    paddingLeft: 25,
    height: 32
  }
});

var TodoListItem = React.createClass({
  render() {
    const todo = this.props.todo;
    return (
      <View>
        <View>
          <View style={styles.row}>
            {this.renderContent()}
            {this.renderStatus()}
          </View>
        </View>
        <View style={styles.separator} />
      </View>
    );
  },
  renderContent() {
    const todo = this.props.todo;
    let content = (
      <View style={styles.rowContent}>
        <Text style={styles.text}>
          {todo.text}
        </Text>
      </View>
    );
    if(todo.children.length) {
      content = (
        <TouchableHighlight onPress={this.onPress} style={styles.rowContent}>
          {content}
        </TouchableHighlight>
      );
    }
    return content;
  },
  renderStatus() {
    const todo = this.props.todo;
    let status = '>';
    if(!todo.children.length) {
      status = todo.done ? '[X]' : '[  ]';
    }
    const statusView = (
      <View style={styles.status}>
        <Text style={styles.statusContent}>{status}</Text>
      </View>
    );
    return todo.children.length ? statusView : <TouchableHighlight onPress={this.onPressStatus}>{statusView}</TouchableHighlight>;
  },
  onPress() {
    const todo = this.props.todo;
    const data = this.props.data;
    const TodoList = this.props.listClass;
    const newChildren = filter(data, 'parent', todo.id);
    console.log(data, todo.id, typeof todo.id, newChildren);
    this.props.navigator.push({
      component: TodoList,
      title: todo.text,
      passProps: {
        data: data,
        todo: todo,
        children: newChildren
      }
    });
  },
  onPressStatus(e) {
    console.log(e);
  }
});

module.exports = TodoListItem;
